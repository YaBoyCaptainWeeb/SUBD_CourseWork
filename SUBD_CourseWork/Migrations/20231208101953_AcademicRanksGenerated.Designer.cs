// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SUBD_CourseWork;

#nullable disable

namespace SUBD_CourseWork.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231208101953_AcademicRanksGenerated")]
    partial class AcademicRanksGenerated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SUBD_CourseWork.Entities.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicRankType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("YearOfAward")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("academicRanks", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2015, 12, 28)
                        },
                        new
                        {
                            Id = 2,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2020, 10, 29)
                        },
                        new
                        {
                            Id = 3,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2010, 9, 6)
                        },
                        new
                        {
                            Id = 4,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2010, 8, 5)
                        },
                        new
                        {
                            Id = 5,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2012, 2, 20)
                        },
                        new
                        {
                            Id = 6,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2018, 6, 6)
                        },
                        new
                        {
                            Id = 7,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2021, 4, 10)
                        },
                        new
                        {
                            Id = 8,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2018, 10, 2)
                        },
                        new
                        {
                            Id = 9,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2019, 11, 14)
                        },
                        new
                        {
                            Id = 10,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2018, 11, 30)
                        },
                        new
                        {
                            Id = 11,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2022, 6, 4)
                        },
                        new
                        {
                            Id = 12,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2022, 1, 15)
                        },
                        new
                        {
                            Id = 13,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2023, 2, 7)
                        },
                        new
                        {
                            Id = 14,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2018, 6, 17)
                        },
                        new
                        {
                            Id = 15,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2020, 12, 13)
                        },
                        new
                        {
                            Id = 16,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2007, 10, 5)
                        },
                        new
                        {
                            Id = 17,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2012, 4, 13)
                        },
                        new
                        {
                            Id = 18,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2007, 8, 28)
                        },
                        new
                        {
                            Id = 19,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2010, 6, 23)
                        },
                        new
                        {
                            Id = 20,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2023, 4, 1)
                        },
                        new
                        {
                            Id = 21,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2019, 6, 16)
                        },
                        new
                        {
                            Id = 22,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2007, 8, 13)
                        },
                        new
                        {
                            Id = 23,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2019, 11, 19)
                        },
                        new
                        {
                            Id = 24,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2011, 5, 25)
                        },
                        new
                        {
                            Id = 25,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2014, 4, 7)
                        },
                        new
                        {
                            Id = 26,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2008, 8, 6)
                        },
                        new
                        {
                            Id = 27,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2017, 3, 17)
                        },
                        new
                        {
                            Id = 28,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2014, 4, 26)
                        },
                        new
                        {
                            Id = 29,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2009, 3, 10)
                        },
                        new
                        {
                            Id = 30,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2010, 1, 13)
                        },
                        new
                        {
                            Id = 31,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2013, 9, 30)
                        },
                        new
                        {
                            Id = 32,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2019, 4, 14)
                        },
                        new
                        {
                            Id = 33,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2020, 7, 27)
                        },
                        new
                        {
                            Id = 34,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2021, 8, 14)
                        },
                        new
                        {
                            Id = 35,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2008, 4, 18)
                        },
                        new
                        {
                            Id = 36,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2011, 4, 15)
                        },
                        new
                        {
                            Id = 37,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2006, 3, 30)
                        },
                        new
                        {
                            Id = 38,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2018, 4, 26)
                        },
                        new
                        {
                            Id = 39,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2017, 12, 26)
                        },
                        new
                        {
                            Id = 40,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2022, 2, 8)
                        },
                        new
                        {
                            Id = 41,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2015, 1, 29)
                        },
                        new
                        {
                            Id = 42,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2022, 12, 28)
                        },
                        new
                        {
                            Id = 43,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2023, 1, 15)
                        },
                        new
                        {
                            Id = 44,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2014, 2, 2)
                        },
                        new
                        {
                            Id = 45,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2018, 9, 17)
                        },
                        new
                        {
                            Id = 46,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2021, 8, 2)
                        },
                        new
                        {
                            Id = 47,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2011, 7, 10)
                        },
                        new
                        {
                            Id = 48,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2017, 11, 23)
                        },
                        new
                        {
                            Id = 49,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2022, 10, 2)
                        },
                        new
                        {
                            Id = 50,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2009, 12, 5)
                        },
                        new
                        {
                            Id = 51,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2012, 6, 12)
                        },
                        new
                        {
                            Id = 52,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2012, 9, 4)
                        },
                        new
                        {
                            Id = 53,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2021, 8, 6)
                        },
                        new
                        {
                            Id = 54,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2016, 7, 11)
                        },
                        new
                        {
                            Id = 55,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2019, 8, 8)
                        },
                        new
                        {
                            Id = 56,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2008, 3, 18)
                        },
                        new
                        {
                            Id = 57,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2010, 7, 16)
                        },
                        new
                        {
                            Id = 58,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2022, 12, 9)
                        },
                        new
                        {
                            Id = 59,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2022, 2, 27)
                        },
                        new
                        {
                            Id = 60,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2011, 4, 9)
                        },
                        new
                        {
                            Id = 61,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2008, 11, 5)
                        },
                        new
                        {
                            Id = 62,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2023, 5, 6)
                        },
                        new
                        {
                            Id = 63,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2020, 3, 13)
                        },
                        new
                        {
                            Id = 64,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2022, 8, 6)
                        },
                        new
                        {
                            Id = 65,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2023, 3, 8)
                        },
                        new
                        {
                            Id = 66,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2011, 6, 11)
                        },
                        new
                        {
                            Id = 67,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2017, 6, 3)
                        },
                        new
                        {
                            Id = 68,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2012, 5, 24)
                        },
                        new
                        {
                            Id = 69,
                            AcademicRankType = "Профессор",
                            YearOfAward = new DateOnly(2020, 8, 12)
                        },
                        new
                        {
                            Id = 70,
                            AcademicRankType = "Доцент",
                            YearOfAward = new DateOnly(2020, 4, 12)
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("YearOfAward")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("Id");

                    b.ToTable("degrees", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Id");

                    b.ToTable("departments", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyId = 2,
                            Name = "Кафедра летательных аппаратов",
                            ShortName = "КЛА"
                        },
                        new
                        {
                            Id = 2,
                            FacultyId = 2,
                            Name = "Кафедра материаловедения и технологии материалов",
                            ShortName = "КМТМ"
                        },
                        new
                        {
                            Id = 3,
                            FacultyId = 2,
                            Name = "Кафедра механики материалов, конструкций и машин",
                            ShortName = "КММКиМ"
                        },
                        new
                        {
                            Id = 4,
                            FacultyId = 2,
                            Name = "Кафедра систем автоматизации производства",
                            ShortName = "КСАП"
                        },
                        new
                        {
                            Id = 5,
                            FacultyId = 2,
                            Name = "Кафедра технологии машиностроения, металлообрабатывающих станков и комплексов",
                            ShortName = "КТММСиК"
                        },
                        new
                        {
                            Id = 6,
                            FacultyId = 2,
                            Name = "Кафедра управления и информатики в технических системах",
                            ShortName = "КУиИТС"
                        },
                        new
                        {
                            Id = 7,
                            FacultyId = 1,
                            Name = "Кафедра вычислительной техники и защиты информации",
                            ShortName = "КВТИИ"
                        },
                        new
                        {
                            Id = 8,
                            FacultyId = 1,
                            Name = "Кафедра информатики",
                            ShortName = "КИ"
                        },
                        new
                        {
                            Id = 9,
                            FacultyId = 1,
                            Name = "Кафедра компьютерной безопасности и математического обеспечения информационных систем",
                            ShortName = "ККБиМОИС"
                        },
                        new
                        {
                            Id = 10,
                            FacultyId = 1,
                            Name = "Кафедра математики и цифровых технологий",
                            ShortName = "КМиЦТ"
                        },
                        new
                        {
                            Id = 11,
                            FacultyId = 1,
                            Name = "Кафедра математических методов и моделей в экономике",
                            ShortName = "КММиМЭ"
                        },
                        new
                        {
                            Id = 12,
                            FacultyId = 1,
                            Name = "Кафедра прикладной информатики в экономике и управлении",
                            ShortName = "КПИЭиУ"
                        },
                        new
                        {
                            Id = 13,
                            FacultyId = 1,
                            Name = "Кафедра прикладной математики",
                            ShortName = "КПМ"
                        },
                        new
                        {
                            Id = 14,
                            FacultyId = 1,
                            Name = "Кафедра программного обеспечения вычислительной техники и автоматизированных систем",
                            ShortName = "КПОВТиАС"
                        },
                        new
                        {
                            Id = 15,
                            FacultyId = 1,
                            Name = "Кафедра статистики и эконометрики",
                            ShortName = "КСиЭ"
                        },
                        new
                        {
                            Id = 16,
                            FacultyId = 3,
                            Name = "Кафедра автомобильных дорог и строительных материалов",
                            ShortName = "КАДиСМ"
                        },
                        new
                        {
                            Id = 17,
                            FacultyId = 3,
                            Name = "Кафедра архитектуры",
                            ShortName = "КА"
                        },
                        new
                        {
                            Id = 18,
                            FacultyId = 3,
                            Name = "Кафедра начертательной геометрии, инженерной и компьютерной графики",
                            ShortName = "КНГНиКГ"
                        },
                        new
                        {
                            Id = 19,
                            FacultyId = 3,
                            Name = "Кафедра строительных конструкций",
                            ShortName = "КСК"
                        },
                        new
                        {
                            Id = 20,
                            FacultyId = 3,
                            Name = "Кафедра теплогазоснабжения, вентиляции и гидромеханики",
                            ShortName = "КТВиГ"
                        },
                        new
                        {
                            Id = 21,
                            FacultyId = 3,
                            Name = "Кафедра технологии строительного производства",
                            ShortName = "КТСП"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisciplineType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("disciplines", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisciplineType = "Технических наук"
                        },
                        new
                        {
                            Id = 2,
                            DisciplineType = "Экономических наук"
                        },
                        new
                        {
                            Id = 3,
                            DisciplineType = "Математических наук"
                        },
                        new
                        {
                            Id = 4,
                            DisciplineType = "Информационных наук"
                        },
                        new
                        {
                            Id = 5,
                            DisciplineType = "Философских наук"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.EmailAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("emailAdresses", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("faculties", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstitutionId = 1,
                            Name = "Институт Математики и информационных технологий",
                            ShortName = "ИМИТ"
                        },
                        new
                        {
                            Id = 2,
                            InstitutionId = 1,
                            Name = "Аэрокосмический институт",
                            ShortName = "АЭИ"
                        },
                        new
                        {
                            Id = 3,
                            InstitutionId = 1,
                            Name = "Архитектурно-строительный факультет",
                            ShortName = "АСФ"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.HouseNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("House")
                        .HasColumnType("integer");

                    b.Property<int>("StreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("houseNumbers", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            House = 50,
                            StreetId = 19
                        },
                        new
                        {
                            Id = 2,
                            House = 21,
                            StreetId = 19
                        },
                        new
                        {
                            Id = 3,
                            House = 39,
                            StreetId = 5
                        },
                        new
                        {
                            Id = 4,
                            House = 82,
                            StreetId = 2
                        },
                        new
                        {
                            Id = 5,
                            House = 79,
                            StreetId = 3
                        },
                        new
                        {
                            Id = 6,
                            House = 97,
                            StreetId = 14
                        },
                        new
                        {
                            Id = 7,
                            House = 98,
                            StreetId = 7
                        },
                        new
                        {
                            Id = 8,
                            House = 80,
                            StreetId = 13
                        },
                        new
                        {
                            Id = 9,
                            House = 31,
                            StreetId = 11
                        },
                        new
                        {
                            Id = 10,
                            House = 25,
                            StreetId = 1
                        },
                        new
                        {
                            Id = 11,
                            House = 76,
                            StreetId = 7
                        },
                        new
                        {
                            Id = 12,
                            House = 72,
                            StreetId = 8
                        },
                        new
                        {
                            Id = 13,
                            House = 41,
                            StreetId = 7
                        },
                        new
                        {
                            Id = 14,
                            House = 64,
                            StreetId = 6
                        },
                        new
                        {
                            Id = 15,
                            House = 11,
                            StreetId = 19
                        },
                        new
                        {
                            Id = 16,
                            House = 48,
                            StreetId = 8
                        },
                        new
                        {
                            Id = 17,
                            House = 86,
                            StreetId = 3
                        },
                        new
                        {
                            Id = 18,
                            House = 16,
                            StreetId = 9
                        },
                        new
                        {
                            Id = 19,
                            House = 6,
                            StreetId = 10
                        },
                        new
                        {
                            Id = 20,
                            House = 68,
                            StreetId = 8
                        },
                        new
                        {
                            Id = 21,
                            House = 51,
                            StreetId = 11
                        },
                        new
                        {
                            Id = 22,
                            House = 94,
                            StreetId = 3
                        },
                        new
                        {
                            Id = 23,
                            House = 72,
                            StreetId = 10
                        },
                        new
                        {
                            Id = 24,
                            House = 35,
                            StreetId = 17
                        },
                        new
                        {
                            Id = 25,
                            House = 98,
                            StreetId = 10
                        },
                        new
                        {
                            Id = 26,
                            House = 36,
                            StreetId = 7
                        },
                        new
                        {
                            Id = 27,
                            House = 89,
                            StreetId = 10
                        },
                        new
                        {
                            Id = 28,
                            House = 72,
                            StreetId = 1
                        },
                        new
                        {
                            Id = 29,
                            House = 25,
                            StreetId = 4
                        },
                        new
                        {
                            Id = 30,
                            House = 90,
                            StreetId = 8
                        },
                        new
                        {
                            Id = 31,
                            House = 19,
                            StreetId = 1
                        },
                        new
                        {
                            Id = 32,
                            House = 71,
                            StreetId = 6
                        },
                        new
                        {
                            Id = 33,
                            House = 97,
                            StreetId = 6
                        },
                        new
                        {
                            Id = 34,
                            House = 67,
                            StreetId = 15
                        },
                        new
                        {
                            Id = 35,
                            House = 81,
                            StreetId = 4
                        },
                        new
                        {
                            Id = 36,
                            House = 94,
                            StreetId = 19
                        },
                        new
                        {
                            Id = 37,
                            House = 15,
                            StreetId = 19
                        },
                        new
                        {
                            Id = 38,
                            House = 54,
                            StreetId = 5
                        },
                        new
                        {
                            Id = 39,
                            House = 59,
                            StreetId = 1
                        },
                        new
                        {
                            Id = 40,
                            House = 65,
                            StreetId = 11
                        },
                        new
                        {
                            Id = 41,
                            House = 90,
                            StreetId = 2
                        },
                        new
                        {
                            Id = 42,
                            House = 93,
                            StreetId = 12
                        },
                        new
                        {
                            Id = 43,
                            House = 10,
                            StreetId = 4
                        },
                        new
                        {
                            Id = 44,
                            House = 22,
                            StreetId = 18
                        },
                        new
                        {
                            Id = 45,
                            House = 84,
                            StreetId = 3
                        },
                        new
                        {
                            Id = 46,
                            House = 31,
                            StreetId = 4
                        },
                        new
                        {
                            Id = 47,
                            House = 74,
                            StreetId = 18
                        },
                        new
                        {
                            Id = 48,
                            House = 79,
                            StreetId = 11
                        },
                        new
                        {
                            Id = 49,
                            House = 11,
                            StreetId = 2
                        },
                        new
                        {
                            Id = 50,
                            House = 41,
                            StreetId = 5
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.IndividualPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TypeOfWorkId")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.Property<int>("factForFallSemestre")
                        .HasColumnType("integer");

                    b.Property<int>("factForSpringSemestre")
                        .HasColumnType("integer");

                    b.Property<int>("plannedForFallSemestre")
                        .HasColumnType("integer");

                    b.Property<int>("plannedForSpringSemestre")
                        .HasColumnType("integer");

                    b.Property<int>("teacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TypeOfWorkId");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.HasIndex("teacherId")
                        .IsUnique();

                    b.ToTable("individualPlans", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("institutions", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Оренбургский государственный университет",
                            ShortName = "ОГУ"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTitlesType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("jobTitles", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobTitlesType = "Лаборант"
                        },
                        new
                        {
                            Id = 2,
                            JobTitlesType = "Асссистент"
                        },
                        new
                        {
                            Id = 3,
                            JobTitlesType = "Преподаватель"
                        },
                        new
                        {
                            Id = 4,
                            JobTitlesType = "Старший преподаватель"
                        },
                        new
                        {
                            Id = 5,
                            JobTitlesType = "Доцент"
                        },
                        new
                        {
                            Id = 6,
                            JobTitlesType = "Профессор"
                        },
                        new
                        {
                            Id = 7,
                            JobTitlesType = "Заведующий кафедрой"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("phoneNumbers", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("streets", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "пр. Набережная"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пионерская улица"
                        },
                        new
                        {
                            Id = 3,
                            Name = "улица Дорожная"
                        },
                        new
                        {
                            Id = 4,
                            Name = "пл. Шоссейная"
                        },
                        new
                        {
                            Id = 5,
                            Name = "пл. Пролетарская"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Вокзальная площадь"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Труда проспект"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Сосновая пл."
                        },
                        new
                        {
                            Id = 9,
                            Name = "Механизаторов площадь"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Совхозная пл."
                        },
                        new
                        {
                            Id = 11,
                            Name = "ул. Набережная"
                        },
                        new
                        {
                            Id = 12,
                            Name = "улица Мира"
                        },
                        new
                        {
                            Id = 13,
                            Name = "улица Партизанская"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Мира площадь"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Мира ул."
                        },
                        new
                        {
                            Id = 16,
                            Name = "Степная улица"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Строительная улица"
                        },
                        new
                        {
                            Id = 18,
                            Name = "пр. Дзержинского"
                        },
                        new
                        {
                            Id = 19,
                            Name = "проспект Крупской"
                        },
                        new
                        {
                            Id = 20,
                            Name = "ул. Пролетарская"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicRankId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfBeginning")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfEnding")
                        .HasColumnType("date");

                    b.Property<int>("DegreeId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ElectedDate")
                        .HasColumnType("date");

                    b.Property<int>("HouseNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfCooperationId")
                        .HasColumnType("integer");

                    b.Property<double>("Wage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AcademicRankId")
                        .IsUnique();

                    b.HasIndex("DegreeId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HouseNumberId");

                    b.HasIndex("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("TypeOfCooperationId");

                    b.ToTable("teachers", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.TypeOfCooperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoopType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("typeOfCooperations", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoopType = "Штатный"
                        },
                        new
                        {
                            Id = 2,
                            CoopType = "Совмещает"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.TypeOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("typeOfWorks", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Учебная работа"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Учебно-методическая работа"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Научно-методическая"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Научно-исслеовательнская работа"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Организационно-методическая работа"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Внеурочная работа со студентами"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Прочие виды работы"
                        });
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("endOfYear")
                        .HasColumnType("date");

                    b.Property<DateOnly>("startOfYear")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Years", "public");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Degree", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Discipline", "Discipline")
                        .WithMany("Degrees")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Department", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.EmailAdress", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Teacher", "Teacher")
                        .WithMany("EmailAdresses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Faculty", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Institution", "Institution")
                        .WithMany("Faculties")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.HouseNumber", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Street", "street")
                        .WithMany("HouseNumbers")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("street");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.IndividualPlan", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.TypeOfWork", "TypeOfWork")
                        .WithMany()
                        .HasForeignKey("TypeOfWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.Year", "Year")
                        .WithOne("individualPlans")
                        .HasForeignKey("SUBD_CourseWork.Entities.IndividualPlan", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.Teacher", "teacher")
                        .WithOne("IndividualPlan")
                        .HasForeignKey("SUBD_CourseWork.Entities.IndividualPlan", "teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfWork");

                    b.Navigation("Year");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.PhoneNumber", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.Teacher", "Teacher")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Teacher", b =>
                {
                    b.HasOne("SUBD_CourseWork.Entities.AcademicRank", "AcademicRank")
                        .WithOne("Teacher")
                        .HasForeignKey("SUBD_CourseWork.Entities.Teacher", "AcademicRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.Degree", "Degree")
                        .WithOne("Teacher")
                        .HasForeignKey("SUBD_CourseWork.Entities.Teacher", "DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.HouseNumber", "HouseNumber")
                        .WithMany("Teachers")
                        .HasForeignKey("HouseNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.JobTitle", "JobTitle")
                        .WithMany("Teachers")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUBD_CourseWork.Entities.TypeOfCooperation", "TypeOfCooperation")
                        .WithMany("Teachers")
                        .HasForeignKey("TypeOfCooperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicRank");

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("HouseNumber");

                    b.Navigation("JobTitle");

                    b.Navigation("TypeOfCooperation");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.AcademicRank", b =>
                {
                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Degree", b =>
                {
                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Department", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Discipline", b =>
                {
                    b.Navigation("Degrees");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.HouseNumber", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Institution", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.JobTitle", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Street", b =>
                {
                    b.Navigation("HouseNumbers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Teacher", b =>
                {
                    b.Navigation("EmailAdresses");

                    b.Navigation("IndividualPlan")
                        .IsRequired();

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.TypeOfCooperation", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SUBD_CourseWork.Entities.Year", b =>
                {
                    b.Navigation("individualPlans")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
